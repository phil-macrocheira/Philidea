@page
@model IndexModel
@{
    ViewData["Title"] = "TOTK Damage Calculator";
}
@Html.AntiForgeryToken()

<style>
    body {
        background-image: url("background.webp");
    }

    h5 {
        color: white;
    }
    ul {
        color: white;
        list-style-type: none;
    }
</style>

<div class="container" >
    <div class="row">
        <!--WEAPON-->
        <div class="col-md-auto py-2">
            <h5>Weapon</h5>
            <select name="SelectedWeaponName" class="form-select" id="weaponDropdown" style="width:17rem;" onchange="update('weapon');">
                @if (Model.Weapons != null) {
                    @foreach (var weapon in Model.Weapons)
                    {
                        <option value="@weapon.Name">@weapon.Name</option>
                    }
                }
            </select>
        </div>

        <!--ATTACK UP MOD-->
        <div class="col-md-auto py-2">
            <h5>Attack Up Mod</h5>
            <div class="form-outline" style="width: 8rem;">
                <input asp-for="Input.AttackUpMod" class="form-control" id="numberAttackUpMod" type="number" value="0" min="0" max="0" onchange="update()" />
            </div>
        </div>

        <!--FUSE-->
        <div class="col-md-auto" style="margin-top:8px;">
            <h5>Fuse</h5>
            <select name="SelectedFuseName" class="form-select text-wrap" id="fuseDropdown" style="width:16rem; height:4rem;" onchange="update('fuse');">
                @if (Model.Fuses != null) {
                    @foreach (var fuse in Model.Fuses)
                    {
                        <option value="@fuse.Name">@fuse.Name</option>
                    }
                }
            </select>
        </div>

        <!--ATTACK TYPE-->
        <div class="col-md-auto py-2">
            <h5>Attack Type</h5>
            <select asp-for="Input.AttackType" class="form-select" id="attacktypeDropdown" style="width:14rem;" onchange="update()">
                <option selected>Standard Attack</option>
                <option value="Charge Attack">Charge Attack</option>
                <option value="Flurry Rush">Flurry Rush</option>
                <option value="Sneakstrike">Sneakstrike</option>
                <option value="Throw">Throw</option>
                <option value="Headshot">Headshot</option>
                <option value="Rod Projectile">Rod Projectile</option>
            </select>
        </div>

        <!--CHECKBOXES-->
        <div class="col-md-3 py-2">
            <div class="form-check">
                <label class="form-check-label d-block" style="color:white;">
                    <input asp-for="Input.LowDurability" id="checkboxLowDurability" class="form-check-input" type="checkbox" onchange="update()">Low Durability
                </label>
            </div>
            <div class="form-check">
                <label class="form-check-label d-block" style="color:white;">
                    <input asp-for="Input.Multishot" id="checkboxMultishot" class="form-check-input" type="checkbox" onchange="update()">Multishot Modifier
                </label>
            </div>
            <div class="form-check">
                <label class="form-check-label d-block" style="color:white;">
                    <input asp-for="Input.Wet" id="checkboxWet" class="form-check-input" type="checkbox" onchange="update()">Player Wet
                </label>
            </div>
            <div class="form-check">
                <label class="form-check-label d-block" style="color:white;">
                    <input asp-for="Input.Frozen" id="checkboxFrozen" class="form-check-input" type="checkbox" onchange="update()">Enemy Frozen
                </label>
            </div>
        </div>
    </div>

    <div class="row py-4">
        <!--ENEMY-->
        <div class="col-md-auto py-2">
            <h5>Enemy</h5>
            <select name="SelectedEnemyName" class="form-select" id="enemyDropdown" style="width:14rem;" onchange="update('enemy');">
                @if (Model.Enemies != null) {
                    @foreach (var enemy in Model.Enemies)
                    {
                        <option value="@enemy.Name">@enemy.Name</option>
                    }
                }
            </select>
        </div>

    <div class="row">
        <!--CURRENT HEARTS-->
        <div class="col-md-auto py-2">
            <h5>Current Hearts</h5>
            <div class="form-outline" style="width: 5.5rem;">
                <input asp-for="Input.HP" class="form-control" id="numberHP" type="number" value="38" step="0.25" min="0.25" max="40" onchange="update()" />
            </div>
        </div>

        <!--ARMOR/FOOD BUFF 1-->
        <div class="col-md-auto py-2">
            <h5>Armor/Food Buffs</h5>
            <select asp-for="Input.Buff1" id="buffDropdown1" class="form-select" style="width:14rem;" onchange="update()">
                <option selected>None</option>
                <option value="Attack Up (Lv1)">Attack Up (Lv1)</option>
                <option value="Attack Up (Lv2)">Attack Up (Lv2)</option>
                <option value="Attack Up (Lv3)">Attack Up (Lv3)</option>
                <option value="Bone Weap. Prof.">Bone Weap. Prof.</option>
                <option value="Hot Weather Attack">Hot Weather Attack</option>
                <option value="Stormy Weather Attack">Stormy Weather Attack</option>
                <option value="Cold Weather Attack">Cold Weather Attack</option>
                <option value="Master Sword Beam Up">Master Sword Beam Up</option>
            </select>
        </div>

        <!--ARMOR/FOOD BUFF 2-->
        <div class="col-md-auto py-2">
            <select asp-for="Input.Buff2" id="buffDropdown2" class="form-select" style="width:14rem; margin-top:32px;" onchange="update()">
                <option selected>None</option>
                <option value="Attack Up (Lv1)">Attack Up (Lv1)</option>
                <option value="Attack Up (Lv2)">Attack Up (Lv2)</option>
                <option value="Attack Up (Lv3)">Attack Up (Lv3)</option>
                <option value="Bone Weap. Prof.">Bone Weap. Prof.</option>
                <option value="Hot Weather Attack">Hot Weather Attack</option>
                <option value="Stormy Weather Attack">Stormy Weather Attack</option>
                <option value="Cold Weather Attack">Cold Weather Attack</option>
                <option value="Master Sword Beam Up">Master Sword Beam Up</option>
            </select>
        </div>
    </div>

    <div class="row">
        <!--WEAPON ICON-->
        <div style="float:left;width:128px; height:128px; margin-top:50px;">
            <img src="@Model.WeaponIconURL" id="weaponImage" class="rounded float-left" alt="Weapon Image" style="height:100%; width:100%; object-fit:contain;">
        </div>
        <!--FUSE ICON-->
        <div style="float:left;width:80px; height:80px; margin-top:45px; margin-left:-25px">
            <img src="@Model.FuseIconURL" id="fuseImage" class="rounded float-left" alt="Fuse Image" style="height:100%; width:100%; object-fit:contain;">
        </div>

        <div style="clear:both;"></div>

        <!--ENEMY ICON-->
        <div style="float:left;width:128px; height:128px; margin-top:20px;">
            <img src="@Model.EnemyIconURL" id="enemyImage" class="rounded float-left" alt="Enemy Image" style="height:100%; width:100%; object-fit:contain;">
        </div>
    </div>

    <!--OUTPUT TEXT-->
    <div class="row">
        <div class="col-md-auto py-2">
            <h1 style="margin-top: -270px; margin-left: 230px; font-size: 28px; color:white;">Properties<br></h1>
            <ul style="margin-left: 200px" id="PropertiesList">
                <li>Cut</li>
            </ul>
        </div>
        <div class="col-md-auto py-2" id="DamageOutputText">
            <h1 style="margin-top: -270px; margin-left: 30px; font-size: 28px; color:white;">Damage: @Model.DamageOutput</h1>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function findObjByName(objData, selectedName) {
            return objData.find(function (w) {
                return w.Name === selectedName;
            });
        }

        function update(dropdownEdited) {
            var weaponData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Weapons));
            var fuseData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Fuses));
            var enemyData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Enemies));

            var selectedWeaponName = $('#weaponDropdown').val();
            var selectedFuseName = $('#fuseDropdown').val();
            var selectedEnemyName = $('#enemyDropdown').val();

            var selectedWeaponObj = findObjByName(weaponData, selectedWeaponName);
            var selectedFuseObj = findObjByName(fuseData, selectedFuseName);
            var selectedEnemyObj = findObjByName(enemyData, selectedEnemyName);

            // UPDATE ICON
            switch (dropdownEdited) {
                case 'weapon':
                    $('#weaponImage').prop('src', selectedWeaponObj ? selectedWeaponObj.IconURL : '');
                    break;
                case 'fuse':
                    $('#fuseImage').prop('src', selectedFuseObj ? selectedFuseObj.IconURL : '');
                    break;
                case 'enemy':
                    $('#enemyImage').prop('src', selectedEnemyObj ? selectedEnemyObj.IconURL : '');
                    break;
            }

            // TRIGGER IF WEAPON DROPDOWN EDITED
            if (dropdownEdited === 'weapon') {
                // UPDATE ATTACK UP MOD MAXIMUM
                if (selectedWeaponObj.CanHaveAttackUpMod === false) {
                    $('#numberAttackUpMod').prop('max', 0);
                    $('#numberAttackUpMod').val(0);
                }
                else {
                    $('#numberAttackUpMod').prop('max', 10);
                }

                // UPDATE FUSE DROPDOWN
                if (selectedWeaponObj.Type == 3) {
                    var FusesArrow = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.FusesArrow));
                    var fuseDropdown = $('#fuseDropdown');
                    var selectedFuseName = fuseDropdown.val();

                    fuseDropdown.empty();
                    $.each(FusesArrow, function (index, fuse) {
                        fuseDropdown.append('<option value="' + fuse.Name + '">' + fuse.Name + '</option>');
                    });

                    fuseDropdown.val(FusesArrow[0].Name);
                }
                else {
                    var Fuses = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Fuses));
                    var fuseDropdown = $('#fuseDropdown');
                    var selectedFuseName = fuseDropdown.val();

                    fuseDropdown.empty();
                    $.each(Fuses, function (index, fuse) {
                        fuseDropdown.append('<option value="' + fuse.Name + '">' + fuse.Name + '</option>');
                    });

                    fuseDropdown.val(selectedFuseName);
                }
            }

            var AttackUpModClamped = Math.min(2147483647, parseInt($('#numberAttackUpMod').val(), 10));
            var PlayerHPClamped = Math.min(40, parseFloat($('#numberHP').val()));

            var data = {
                AttackUpMod: AttackUpModClamped,
                AttackType: $('#attacktypeDropdown').val(),
                LowDurability: $('#checkboxLowDurability').is(':checked'),
                Multishot: $('#checkboxMultishot').is(':checked'),
                Wet: $('#checkboxWet').is(':checked'),
                Frozen: $('#checkboxFrozen').is(':checked'),
                PlayerHP: PlayerHPClamped,
                Buff1: $('#buffDropdown1').val(),
                Buff2: $('#buffDropdown2').val(),
                
                NameWeapon: selectedWeaponObj.Name,
                Type: selectedWeaponObj.Type,
                CanCutWeapon: selectedWeaponObj.CanCut,
                BaseAttackWeapon: selectedWeaponObj.BaseAttack,
                ProjectileAttackWeapon: selectedWeaponObj.ProjectileAttack,
                Durability: selectedWeaponObj.Durability,
                Property: selectedWeaponObj.Property,
                CanHaveAttackUpMod: selectedWeaponObj.CanHaveAttackUpMod,
                CanFuseTo: selectedWeaponObj.CanFuseTo,
                FuseExtraDurability: selectedWeaponObj.FuseExtraDurability,
                FuseBaseName: selectedWeaponObj.FuseBaseName,

                NameFuse: selectedFuseObj.Name,
                BaseAttackFuse: selectedFuseObj.BaseAttack,
                ProjectileAttackFuse: selectedFuseObj.ProjectileAttack,
                ElementPower: selectedFuseObj.ElementPower,
                CanFuseToArrow: selectedFuseObj.CanFuseToArrow,
                ArrowMultiplierFuse: selectedFuseObj.ArrowMultiplier,
                CanCutFuse: selectedFuseObj.CanCut,
                AddsShieldAttack: selectedFuseObj.AddsShieldAttack,
                ReplaceProperties: selectedFuseObj.ReplaceProperties,
                Property1: selectedFuseObj.Property1,
                Property2: selectedFuseObj.Property2,
                Property3: selectedFuseObj.Property3,
                Property4: selectedFuseObj.Property4,

                NameEnemy: selectedEnemyObj.Name,
                HasGloomVariant: selectedEnemyObj.HasGloomVariant,
                EnemyHP: selectedEnemyObj.HP,
                Element: selectedEnemyObj.Element,
                FireDamage: selectedEnemyObj.FireDamage,
                FireDamageContinuous: selectedEnemyObj.FireDamageContinuous,
                CanFreeze: selectedEnemyObj.CanFreeze,
                IceDamage: selectedEnemyObj.IceDamage,
                ShockDamage: selectedEnemyObj.ShockDamage,
                WaterDamage: selectedEnemyObj.WaterDamage,
                RijuDamage: selectedEnemyObj.RijuDamage,
                AncientBladeDefeat: selectedEnemyObj.AncientBladeDefeat,
                IsRock: selectedEnemyObj.IsRock,
                CanSneakstrike: selectedEnemyObj.CanSneakstrike,
                ArrowMultiplierEnemy: selectedEnemyObj.ArrowMultiplier,
                BeamMultiplier: selectedEnemyObj.BeamMultiplier,
                BombMultiplier: selectedEnemyObj.BombMultiplier,
            };

            $.ajax({
                headers: {
                    RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                type: 'POST',
                url: '@Url.Page("Index")',
                contentType: 'application/x-www-form-urlencoded',
                data: data,
                success: function (response) {
                    $('#DamageOutputText').html('<h1 style="margin-top: -270px; margin-left: 30px; font-size: 28px; color:white;">Damage: ' + response.damageOutput + '</h1>');

                    $('#PropertiesList').empty();
                    $.each(response.properties, function (index, property) {
                        $('#PropertiesList').append('<li>' + property + '</li>');
                    });

                    console.log('UPDATE SUCCESS', response);
                },
                error: function (error) {
                    console.error('UPDATE ERROR', error);
                }
            });
        }
    </script>
}